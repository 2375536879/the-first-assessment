//数组和切片的区别

//切片是引用类型，不存储元素，而数组本身就存储元素


1.定义   数组长度固定，定义时必须固定长度（用...也是固定）初始化后无法扩充长度，只能修改元素
        而切片长度可变，能够截取，扩容。
  
2.数据结构  数组是一段连续的内存空间
           而切片是一个结构体，由指针、长度、容量组成


 3.在函数之间传递时，数组会copy一个新数组，造成资源浪费（因为数组本身存储元素） 
 深拷贝 数组传递的是值
 切片同样创建一个新片，但是新切片与原切片指向同一个底层数组，只是地址的复制  
 浅拷贝 切片传递的是指针
 相比之下切片更加节省空间


 4.数组可以哈希，可以作为map的key
   但切片不能




   //--------------------------------------------------------//

   //创建切片的3种方式

package main
import "fmt"
func main(){

    //方式1 定义一个切片，然后让切片去引用一个已经创建好的数组
    //var 切片名 []类型 = 数组的一个片段引用
var intarr[6]=[6]int {1,2,3,4,5,6}

var slice[]int=intarr[1:3] //左闭右开
//slice:=intarr[1:3]

//切片有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量。其实是一个结构体
//那么可不可以用切片改变数组呢?可以的 引用数据（指针）


    //方式2 通过make内置函数来创建切片。基本语法: var切片名[type = make([], len,[cap])
    slice2:=make([]int,4,20)//初始都是0  1.类型 2.长度 3.容量
    fmt.Println(slice2)
    slice[0]=66
    slice[1]=33
    //PS : make底层创建一个数组，对外不可见，所以不可以直接操作这个数组，要通过slice去间接的访问各个元素，不可以直接对数组进行维护/操作


    //方式3 定一个切片，直接就指定具体数组，使用原理类似make的方式。
    slice3:=[]int{1,4,7}    

}



//-----------------------------------------------------//

//map的创建
package main
import"fmt"
func main(){

//方式1 定义map变量
var a map [int]string
//只声明map内存没有分配空间
//必须通过make函数进行初始化，才会分配空间
a=make(map[int]string,10)

//方式2 
b:=make(map[int]string)
b[102300222]="苏忠朝"

//方式3
c:=map[int]string={
    1111:"张三",
    2222:"李四",
    3333:"王五",
}

}